游戏规则：
4*4的格子
格子上的数字都是2的幂
在第一次移动前将随机添加2或者4的图块在空格中，75%的概率是2,25%的概率是4
玩家通过WASD倾斜平台，所有图块向同一方向移动直到没有足够的空间进行移动
合并准则：
1.两块具有同样值的图块进行合并，得到原来两倍的数值
2.每次执行倾斜平台的操作时，合并过后的图块不会再进行合并，比如X 2 2 4，向左倾斜，应该得到4 4 X X而不是
8 X X X
3.当倾斜方向上有三块图块有相同的数字时，合并该方向上的前两个而不是后两个，比如X 2 2 2应该得到4 2 X X而不是2 4 X X
如果倾斜后棋盘的状态不改变则不会随机生成新的图块
当图块合并后才会得分，需要对分数进行累加

项目结构：
Tile类（图块）：表示图块的值，如果其值为null则说明该区域为空，需要使用的唯一方法是该类的.value()方法，比如 Tile t对应的值为8，则需要通过t.value()对值8进行访问
Side类：用于表示玩家输入的倾斜方向，不需要使用该类的任何方法与操作实例变量
Model类：表示游戏的整个状态，比如存储实例变量有关图块在哪里，得分为多少，以及各种方法
Board类：代表了图块本身，有三种setViewingPerspective, tile, move.方法让我使用
注意！！该项目只需编辑Model.java文档

修改四个主要的方法：
1.public static boolean emptySpaceExists：
功能：如果棋盘中有空格则返回true，只需要使用Board类的tile(int col, int row)与size()方法
2.public static boolean maxTileExists：
功能：当棋盘中有任意图块值为MAX_PIECE时返回true
！！自己书写写代码时也应该参考这一原则，使用类似MAX_PIECE的变量当做最值而不是直接使用2048！！
3.public static boolean atLeastOneMoveExists：
功能：判断是否存在有效移动，有效移动指如果玩家使用WASD后可以使至少一个图块移动则这样的操作被视为有效移动
有两种可以判断是否存在有效移动的方法：
I.棋盘上存在空格
II.存在两个相邻图块有相同的值
4.tilt：
功能：实现所有瓷砖的移动，同时还有实时更新分数（计算规则：如果将两个4合并为8，则分数加8）
I.如果主板发生变化需要将changed局部变量设置为true（仅仅需要修改即可，不需要使用其他方法）
II.棋盘上所有的移动都必须使用Board类的move方法来实现，访问图块信息必须通过Board类的tile方法来实现
在实现四个方向前，可以先着眼于实现向上方向时的功能(可以通过TestUpOnly来判断自己是否正确实现了功能)
请记住board.move(col,row,tile)意味着将该tile一步到位移动至col，row位置（该问题的col row有点阴间，col是从左往右，row是从下到上）
请使用board类的setViewingPerspective方法来实现棋盘方向的调转以实现四个方向上的功能

先只考虑单列（因为只有Up），先往前找最近的空格，再往前一格看看是否能合并
3
2
1
0